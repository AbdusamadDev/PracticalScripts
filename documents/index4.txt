The discrepancy in execution time between your implementation and the provided "Senior+" level code can be attributed to several factors, especially the use of concurrency and the inherent overhead associated with it. Let's break down the key aspects:

Concurrency Overhead: The "Senior+" implementation uses ThreadPoolExecutor from concurrent.futures for concurrent document processing. While this is efficient for large-scale or I/O-bound tasks, it introduces overhead, especially for smaller datasets or tasks that are not I/O-bound. The overhead comes from thread management and context switching.

Single vs. Multi-threaded Execution: For small datasets or tasks where I/O operations (like file reading) do not dominate, a single-threaded implementation (like yours) might outperform a multi-threaded approach due to the absence of concurrency overhead.

Locking Mechanism: The use of Lock in the "Senior+" code to ensure thread safety while updating the shared index also adds overhead. Each time a thread acquires the lock, other threads must wait, which can reduce parallelism.

Complexity of Regex: The regex used (\b\w+\b) is a general and robust solution for word tokenization but might be more computationally intensive compared to simpler string splitting methods, depending on the specifics of the implementation.

Different Data Structures: The way data is stored and accessed in the index can impact performance. The choice of data structure should be tailored to the specific requirements of the task and the scale of the data.

Explanation for Performance Difference
Small Dataset: If your tests are conducted on a relatively small dataset (like a few small files), the overhead of threading and locking in the "Senior+" implementation might not be offset by parallel I/O gains, leading to longer execution times compared to a straightforward, single-threaded approach.

Nature of the Task: For tasks that are not heavily I/O-bound or where the dataset is not large enough to necessitate concurrent processing, a simpler implementation might perform more efficiently.

Conclusion
The "Senior+" level code is designed with scalability and robustness in mind for handling larger and more complex datasets, particularly where I/O operations are a bottleneck. However, for smaller datasets or less complex tasks, a simpler, single-threaded implementation can be more efficient. The key is to match the complexity of the solution to the scale and nature of the problem at hand.